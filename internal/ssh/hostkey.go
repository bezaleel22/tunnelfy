package ssh

import (
	"crypto/rand"
	"crypto/rsa"
	"log"

	"golang.org/x/crypto/ssh"
)

// generateOrFallbackHostKey attempts to generate an RSA host key.
// If generation fails, it falls back to a pre-defined key.
// It returns an ssh.Signer or nil if both methods fail.
func generateOrFallbackHostKey() ssh.Signer {
	// Attempt to generate an RSA host key using crypto/rsa for broader compatibility.
	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		log.Printf("warning: could not generate RSA host key, falling back to pre-defined key: %v", err)
		// Fallback to parsing a pre-defined private key.
		signer, err := parseFallbackKey()
		if err != nil {
			// If the fallback key also fails to parse, log an error.
			// The server will still start, but with an ephemeral host key generated by the ssh library.
			log.Printf("error: could not parse fallback host key, server will use an ephemeral key: %v", err)
			return nil // This path should ideally not be reached if rsa.GenerateKey works.
		}
		return signer
	}

	// If key generation was successful, create a signer.
	signer, err := ssh.NewSignerFromKey(privateKey)
	if err != nil {
		// This should ideally not happen if rsa.GenerateKey succeeded, but we handle it.
		log.Printf("error: could not create signer from generated key, falling back: %v", err)
		signer, err := parseFallbackKey()
		if err != nil {
			log.Printf("error: could not parse fallback host key after signer failure, server will use an ephemeral key: %v", err)
			return nil
		}
		return signer
	}
	log.Println("Using generated RSA host key.")
	return signer
}

// parseFallbackKey parses the pre-defined test private key.
func parseFallbackKey() (ssh.Signer, error) {
	return ssh.ParsePrivateKey([]byte(testPrivateKeyPEM))
}

// testPrivateKeyPEM is a fallback host key.
// In real deployment, generate and persist a host key file and load it.
const testPrivateKeyPEM = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAvxqFf2r2mF3z1yq...REPLACE_WITH_REAL_KEY_IN_PROD...
-----END RSA PRIVATE KEY-----`
